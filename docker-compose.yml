version: "3.9"

services:
  airflow-webserver:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: airflow-webserver
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "8080:8080"
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      AIRFLOW__CORE__CELERY_BROKER_URL: redis://redis:6379/0
      AIRFLOW__CORE__CELERY_RESULT_BACKEND: redis://redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
      PYTHONPATH: /opt/airflow/scripts:/opt/airflow/dags
    volumes:
      - ./logs:/opt/airflow/logs
      - ./scripts:/opt/airflow/scripts:ro
      - ./airflow/dags:/opt/airflow/dags:ro
      - ./plugins:/opt/airflow/plugins:ro
    command: bash /opt/airflow/scripts/airflow-entrypoint.sh
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - data-stack

  airflow-scheduler:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: airflow-scheduler
    restart: unless-stopped
    depends_on:
      airflow-webserver:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      AIRFLOW__CORE__CELERY_BROKER_URL: redis://redis:6379/0
      AIRFLOW__CORE__CELERY_RESULT_BACKEND: redis://redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
      PYTHONPATH: /opt/airflow/scripts:/opt/airflow/dags
    volumes:
      - ./logs:/opt/airflow/logs
      - ./airflow/dags:/opt/airflow/dags:ro
      - ./plugins:/opt/airflow/plugins:ro
    command: airflow scheduler
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob --hostname $(hostname)"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - data-stack
  
  airflow-worker:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: airflow-worker
    restart: unless-stopped
    depends_on:
      airflow-webserver:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      AIRFLOW__CORE__CELERY_BROKER_URL: redis://redis:6379/0
      AIRFLOW__CORE__CELERY_RESULT_BACKEND: redis://redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
      PYTHONPATH: /opt/airflow/scripts:/opt/airflow/dags
    volumes:
      - ./logs:/opt/airflow/logs
      - ./airflow/dags:/opt/airflow/dags:ro
      - ./plugins:/opt/airflow/plugins:ro
    command: celery worker
    healthcheck:
      test: ["CMD-SHELL", 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - data-stack

  airflow-triggerer:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: airflow-triggerer
    restart: unless-stopped
    depends_on:
      airflow-webserver:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
      PYTHONPATH: /opt/airflow/scripts:/opt/airflow/dags
    volumes:
      - ./logs:/opt/airflow/logs
      - ./airflow/dags:/opt/airflow/dags:ro
      - ./plugins:/opt/airflow/plugins:ro
    command: airflow triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - data-stack

  spark-master:
    image: bitnami/spark:3.5.0
    container_name: spark-master
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "7077:7077"
      - "8081:8080"
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./spark/logs:/opt/bitnami/spark/logs
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f org.apache.spark.deploy.master.Master || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - data-stack

  spark-worker:
    image: bitnami/spark:3.5.0
    container_name: spark-worker
    restart: unless-stopped
    depends_on:
      spark-master:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "8082:8081"
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=4G
      - SPARK_WORKER_CORES=4
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f org.apache.spark.deploy.worker.Worker || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - data-stack

  pyspark-notebook:
    image: jupyter/pyspark-notebook
    container_name: pyspark-notebook
    restart: unless-stopped
    depends_on:
      spark-master:
        condition: service_healthy
    ports:
      - "4040:4040"
      - "8888:8888"
    environment:
      - PYSPARK_PYTHON=python3
      - PYSPARK_DRIVER_PYTHON=jupyter
      - PYSPARK_DRIVER_PYTHON_OPTS=notebook
      - SPARK_MASTER=spark://spark-master:7077
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ./notebooks:/home/jovyan/work
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8888"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - data-stack

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - data-stack
    
  kafka-init-topics:
    image: confluentinc/cp-kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./kafka/init-topics.sh:/init-topics.sh
    entrypoint: ["sh", "/init-topics.sh"]
    networks:
      - data-stack
  
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: unless-stopped
    ports:
      - "8085:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - data-stack
  
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/data
      - zookeeper-datalog:/datalog
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - data-stack
  
  postgres:
    image: postgres:14
    container_name: postgres
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - data-stack
  
  minio:
    image: minio/minio
    container_name: minio
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:9000/minio/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - data-stack
  
  flower:
    image: mher/flower:latest
    container_name: flower
    depends_on:
      redis:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - FLOWER_PORT=5555
      - FLOWER_BASIC_AUTH=${FLOWER_USERNAME}:${FLOWER_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "bash -c '</dev/tcp/localhost/5555' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - data-stack

  redis:
    image: redis:6
    container_name: redis
    restart: unless-stopped
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - data-stack

  superset:
    image: apache/superset
    container_name: superset
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "8088:8088"
    environment:
    - SUPERSET_ENV=dev
    - PYTHONPATH=/app/pythonpath
    - SUPERSET_CONFIG_PATH=/app/pythonpath/superset_config.py
    - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./superset/superset_config.py:/app/pythonpath/superset_config.py
      - ./superset/superset-entrypoint.sh:/app/superset-entrypoint.sh
      - superset-home:/app/superset_home
    entrypoint: ["/app/superset-entrypoint.sh"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - data-stack

  hive-metastore:
    image: apache/hive:4.0.0
    container_name: hive-metastore
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    ports:
    - "9083:9083"
    environment:
      - SERVICE_NAME=metastore
      - HIVE_METASTORE_DB_TYPE=postgres
      - HIVE_METASTORE_DB_HOST=postgres
      - HIVE_METASTORE_DB_PORT=5432
      - HIVE_METASTORE_DB=metastore
      - HIVE_METASTORE_USER=${HIVE_METASTORE_USER:-hive}
      - HIVE_METASTORE_PASSWORD=${HIVE_METASTORE_PASSWORD:-hivepass}
    volumes:
      - hive-metastore-data:/opt/hive/data
    command: >
      bash -c "schematool -initSchema -dbType postgres &&
               hive --service metastore"
    healthcheck:
      test: ["CMD-SHELL", "bash -c '</dev/tcp/localhost/9083' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - data-stack

volumes:
  postgres-db-volume:
  redis-data:
  minio-data:
  hive-metastore-data:
  zookeeper-data:
  zookeeper-datalog:
  superset-home:

networks:
  data-stack:
    driver: bridge
    name: data-stack